name: CI
on:
  push:
    branches:
    - master
    tags:
    - "v*"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}

jobs:
  jvm-tests:
    timeout-minutes: 120
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: ["ubuntu-latest"]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: Copy launcher
      run: ./mill -i copyJvmLauncher artifacts/
      if: runner.os == 'Linux'
    - uses: actions/upload-artifact@v2.3.0
      if: runner.os == 'Linux'
      with:
        name: launchers
        path: artifacts/
        if-no-files-found: error
        retention-days: 2
    - name: Unit tests
      run: |
        ./mill -i unitTests
        ./mill -i bloop-rifle._.test
    - name: JVM integration tests
      run: ./mill -i integration.jvm.test

  native-tests:
    timeout-minutes: 120
    runs-on: ${{ matrix.OS }}
    strategy:
      fail-fast: false
      matrix:
        OS: ["ubuntu-latest", "macos-latest", "windows-latest"]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: Generate native launcher
      run: ./mill -i show defaultNativeImage
    - name: Build OS packages
      run: .github/scripts/generate-os-packages.sh
      shell: bash
    - name: Copy artifacts
      run: ./mill -i copyDefaultLauncher artifacts/
    - uses: actions/upload-artifact@v2.3.0
      with:
        name: launchers
        path: artifacts/
        if-no-files-found: error
        retention-days: 2
    - name: Native integration tests
      run: ./mill -i nativeIntegrationTests
      env:
        COURSIER_JNI: force

  native-mostly-static-tests:
    timeout-minutes: 120
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: Generate native launcher
      run: ./mill -i show cli.nativeImageMostlyStatic
    - name: Build slim docker image
      run: .github/scripts/generate-slim-docker-image.sh
    - name: Copy artifacts
      run: ./mill -i copyMostlyStaticLauncher artifacts/
    - uses: actions/upload-artifact@v2.3.0
      with:
        name: launchers
        path: artifacts/
        if-no-files-found: error
        retention-days: 2
    - name: Native integration tests
      run: ./mill -i integration.native-mostly-static.test
    - name: Docker integration tests
      run: ./mill integration.docker-slim.test
    - name: Login to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Push slim scala-cli image to github container registry
      if: startsWith(github.ref, 'refs/tags/v')
      run: .github/scripts/publish-slim-docker-images.sh

  native-static-tests:
    timeout-minutes: 120
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: Generate native launcher
      run: ./mill -i show cli.nativeImageStatic
    - name: Build docker image
      run: .github/scripts/generate-docker-image.sh
    - name: Copy artifacts
      run: ./mill -i copyStaticLauncher artifacts/
    - uses: actions/upload-artifact@v2.3.0
      with:
        name: launchers
        path: artifacts/
        if-no-files-found: error
        retention-days: 2
    - name: Native integration tests
      run: ./mill -i integration.native-static.test
    - name: Docker integration tests
      run: ./mill integration.docker.test
    - name: Login to GitHub Container Registry
      if: startsWith(github.ref, 'refs/tags/v')
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Push scala-cli to github container registry
      if: startsWith(github.ref, 'refs/tags/v')
      run: .github/scripts/publish-docker-images.sh

  docs-tests:
    # for now, lets run those tests only on ubuntu
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: Test documentation
      run: .github/scripts/check_docs.sh
    - name: Test gifs
      run: gifs/generate_gifs.sh $(ls gifs/scenarios/)

  checks:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: Check native-image config format
      run: ./mill -i __.checkNativeImageConfFormat
    - name: Check Ammonite availability
      run: ./mill -i 'dummy.amm[_].resolvedRunIvyDeps.'
    - name: Scalafix check
      run: |
        ./mill -i __.fix --check || (
          echo "To remove unused import run"
          echo "  ./mill -i __.fix"
          exit 1
        )

  format:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
        apps: scalafmt:3.0.0
    - run: scalafmt --check

  reference-doc:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: Check that reference doc is up-to-date
      run: |
        ./mill -i generate-reference-doc.run --check || (
          echo "Reference doc is not up-to-date. Run"
          echo "  ./mill -i generate-reference-doc.run"
          echo "to update it, then commit the result."
          exit 1
        )

  vc-redist:
    timeout-minutes: 15
    runs-on: windows-latest
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name == 'Virtuslab/scala-cli'
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - run: ./mill -i ci.copyVcRedist
    - uses: actions/upload-artifact@v2.3.0
      with:
        name: launchers
        path: artifacts/
        if-no-files-found: warn
        retention-days: 2

  publish:
    needs: [jvm-tests, format, checks, reference-doc]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - name: GPG setup
      run: .github/scripts/gpg-setup.sh
      env:
        PGP_SECRET: ${{ secrets.PGP_SECRET }}
    - run: ./mill -i ci.setShouldPublish
    - run: ./mill -i publishSonatype __.publishArtifacts
      if: env.SHOULD_PUBLISH == 'true'
      env:
        PGP_PASSWORD: ${{ secrets.PGP_PASSPHRASE }}
        SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
        SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
    - name: Update stable branch
      if: env.SHOULD_PUBLISH == 'true' && startsWith(github.ref, 'refs/tags/v')
      uses: devmasx/merge-branch@8b86512c768bec19827894f0a39a776809668189
      with:
        type: now
        message: 'Back port of documentation changes to stable'
        target_branch: stable
        github_token: ${{ secrets.GITHUB_TOKEN }}

  launchers:
    timeout-minutes: 20
    needs: [jvm-tests, native-tests, native-mostly-static-tests, native-static-tests, vc-redist, format, checks, reference-doc]
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true
    - uses: coursier/cache-action@v6.3
    - uses: coursier/setup-action@v1.1.2
      with:
        jvm: 11
    - run: ./mill -i ci.setShouldPublish
    - uses: actions/download-artifact@v2
      if: env.SHOULD_PUBLISH == 'true'
      with:
        name: launchers
        path: artifacts/
    - run: ./mill -i uploadLaunchers artifacts/
      if: env.SHOULD_PUBLISH == 'true'
      env:
        UPLOAD_GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-packages:
    name: Update packages
    needs: launchers
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: true
      - uses: coursier/cache-action@v6.3
      - uses: coursier/setup-action@v1.1.2
        with:
          jvm: 11
      - uses: actions/download-artifact@v2
        with:
          name: launchers
          path: artifacts/
      - name: Display structure of downloaded files
        run: ls -R
        working-directory: artifacts/
      - uses: webfactory/ssh-agent@fc49353b67b2b7c1e0e6a600572d01a69f2672dd
        with:
          ssh-private-key: |
            ${{ secrets.SCALA_CLI_PACKAGES_KEY }}
            ${{ secrets.HOMEBREW_SCALA_CLI_KEY }}
      - run: ./mill -i ci.updateInstallationScript
      - run: ./mill -i ci.updateBrewFormula
      - name: GPG setup
        run: .github/scripts/gpg-setup.sh
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
      - run: ./mill -i ci.updateDebianPackages
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          GPG_EMAIL: ${{ secrets.GPG_EMAIL }}
      - run: ./mill -i ci.updateCentOsPackages
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          KEYGRIP: ${{ secrets.KEYGRIP }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          GPG_EMAIL: ${{ secrets.GPG_EMAIL }}
      - run: ./mill -i ci.updateStandaloneLauncher
        env:
          UPLOAD_GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

