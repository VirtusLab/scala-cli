"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[439],{3043:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>d,metadata:()=>l,toc:()=>t});const l=JSON.parse('{"id":"guides/advanced/piping","title":"Piping","description":"Instead of passing paths to your sources, you can also pipe your code via standard input:","source":"@site/docs/guides/advanced/piping.md","sourceDirName":"guides/advanced","slug":"/guides/advanced/piping","permalink":"/docs/guides/advanced/piping","draft":false,"unlisted":false,"editUrl":"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/advanced/piping.md","tags":[],"version":"current","sidebarPosition":42,"frontMatter":{"title":"Piping","sidebar_position":42},"sidebar":"tutorialSidebar","previous":{"title":"Scala Native","permalink":"/docs/guides/advanced/scala-native"},"next":{"title":"Snippets","permalink":"/docs/guides/advanced/snippets"}}');var i=n(4848),a=n(8453),c=n(5696);const d={title:"Piping",sidebar_position:42},r="Piping",o={},t=[{value:"Wildcards",id:"wildcards",level:2},{value:"Examples",id:"examples",level:2},{value:"Mixing piped sources with on-disk ones",id:"mixing-piped-sources-with-on-disk-ones",level:2}];function h(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"piping",children:"Piping"})}),"\n",(0,i.jsx)(s.p,{children:"Instead of passing paths to your sources, you can also pipe your code via standard input:"}),"\n",(0,i.jsxs)(c.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo '@main def hello() = println(\"Hello\")' | scala-cli _\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsx)(s.h2,{id:"wildcards",children:"Wildcards"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"_"})," wildcard implies that the piped code is a standard Scala app.\nIt is also possible to pass a script or Java code, when using the appropriate wildcard.\nThe available options are as follows:"]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["for standard Scala code use ",(0,i.jsx)(s.code,{children:"_"}),", ",(0,i.jsx)(s.code,{children:"_.scala"})," or ",(0,i.jsx)(s.code,{children:"-.scala"}),";"]}),"\n",(0,i.jsxs)(s.li,{children:["for Scala scripts use ",(0,i.jsx)(s.code,{children:"-"}),", ",(0,i.jsx)(s.code,{children:"_.sc"})," or ",(0,i.jsx)(s.code,{children:"-.sc"}),";"]}),"\n",(0,i.jsxs)(s.li,{children:["for Java code use ",(0,i.jsx)(s.code,{children:"_.java"})," or ",(0,i.jsx)(s.code,{children:"-.java"}),";"]}),"\n",(0,i.jsxs)(s.li,{children:["for Markdown code use ",(0,i.jsx)(s.code,{children:"_.md"})," or ",(0,i.jsx)(s.code,{children:"-.md"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"scripts"}),"\n"]}),"\n",(0,i.jsxs)(c.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo 'println(\"Hello\")' | scala-cli _.sc\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Scala code"}),"\n"]}),"\n",(0,i.jsxs)(c.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo '@main def hello() = println(\"Hello\")' | scala-cli _.scala\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Java code"}),"\n"]}),"\n",(0,i.jsxs)(c.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo 'class Hello { public static void main(String args[]) { System.out.println(\"Hello\"); } }' | scala-cli _.java\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Markdown code (experimental)"}),"\n"]}),"\n",(0,i.jsxs)(c.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo '# Example Snippet\n```scala\nprintln(\"Hello\")\n```' | scala-cli _.md\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsx)(s.h2,{id:"mixing-piped-sources-with-on-disk-ones",children:"Mixing piped sources with on-disk ones"}),"\n",(0,i.jsx)(s.p,{children:"It is also possible to pipe some code via standard input, while the rest of your code is on-disk."}),"\n",(0,i.jsxs)(c.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo 'case class HelloMessage(msg: String)' > HelloMessage.scala\necho '@main def hello() = println(HelloMessage(msg = \"Hello\").msg)' | scala-cli _ HelloMessage.scala\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.p,{children:["You can even refer to code from piped scripts, when needed. A piped script can be referred to by its wrapper\nname ",(0,i.jsx)(s.code,{children:"stdin"}),", as in the example below."]}),"\n",(0,i.jsxs)(c.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo '@main def main() = println(stdin.message)' > PrintMessage.scala\necho 'def message: String = \"Hello\"' | scala-cli PrintMessage.scala _.sc\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},5696:(e,s,n)=>{n.d(s,{Z:()=>c,b:()=>d});n(6540);var l=n(3554),i=n.n(l),a=n(4848);function c(e){let{children:s}=e;return(0,a.jsx)("div",{className:"runnable-command",children:s})}function d(e){let{url:s}=e;return(0,a.jsx)(i(),{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:s})}}}]);