"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8767],{1726:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"guides/power/python","title":"Python/ScalaPy \u26a1\ufe0f","description":"ScalaPy support is an experimental feature.","source":"@site/docs/guides/power/python.md","sourceDirName":"guides/power","slug":"/guides/power/python","permalink":"/docs/guides/power/python","draft":false,"unlisted":false,"editUrl":"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/power/python.md","tags":[],"version":"current","sidebarPosition":70,"frontMatter":{"title":"Python/ScalaPy \u26a1\ufe0f","sidebar_position":70},"sidebar":"tutorialSidebar","previous":{"title":"Markdown \u26a1\ufe0f","permalink":"/docs/guides/power/markdown"},"next":{"title":"Index","permalink":"/docs/cookbooks/intro"}}');var o=a(4848),s=a(8453);const i={title:"Python/ScalaPy \u26a1\ufe0f",sidebar_position:70},r=void 0,l={},c=[{value:"Example usage",id:"example-usage",level:2}];function p(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.admonition,{type:"caution",children:[(0,o.jsx)(n.p,{children:"ScalaPy support is an experimental feature."}),(0,o.jsxs)(n.p,{children:["Please bear in mind that non-ideal user experience should be expected.\nIf you encounter any bugs or have feedback to share, make sure to reach out to the maintenance team\non ",(0,o.jsx)(n.a,{href:"https://github.com/VirtusLab/scala-cli",children:"GitHub"}),"."]})]}),"\n",(0,o.jsx)(n.p,{children:"ScalaPy is a library that allows you to access the Python interpreter from Scala code. It boasts a simple API, automatic conversion between Scala and Python types, and optional static typing.\nIt makes it possible to integrate Python libraries into Scala CLI projects."}),"\n",(0,o.jsxs)(n.p,{children:["Scala CLI allows to configure the ScalaPy library with the ",(0,o.jsx)(n.code,{children:"--python"})," flag and ",(0,o.jsx)(n.code,{children:"//> using python"})," directive."]}),"\n",(0,o.jsxs)(n.p,{children:["More information about ScalaPy can be found ",(0,o.jsx)(n.a,{href:"https://scalapy.dev",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"example-usage",children:"Example usage"}),"\n",(0,o.jsx)(n.p,{children:"Some configuration might be needed before running the examples below:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"ignore",children:"# install Python 3.11 (e.g. via an installer from the official Python website)\n# then download the packages with\npip3 install numpy matplotlib python-config\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'//> using python\n//> using scala 2.13\n\nimport me.shadaj.scalapy.py\nimport me.shadaj.scalapy.py.SeqConverters\nimport py.PyQuote\n\npy.local {\n  val np = py.module("numpy")\n\n  val rng = np.random.default_rng()\n\n  val randoms = rng.standard_normal(10).as[Seq[Double]]\n\n  randoms.foreach(println(_))\n}\n\nval numbers = py"[x * 2 for x in ${Iterator.from(3).take(10).toList.toPythonCopy}]"\n  .as[Seq[Int]]\n\nprintln(numbers)\n'})}),"\n",(0,o.jsx)(n.p,{children:"You can also use Scala Native to create a native binary with direct bindings to CPython."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-scala",children:'//> using python\n\nimport me.shadaj.scalapy.py\nimport me.shadaj.scalapy.py.SeqConverters\n\nimport scala.util.Random\nimport scala.math.{Pi, sin, random}\n\nobject PlotDemo {\n  @main\n  def plot = {\n    val sequences = generate3DataSeqs\n\n    py.local {\n      val plt = py.module("matplotlib.pyplot")\n\n      for {\n        (seq, color) <- sequences.zip(Seq("b", "r", "g"))\n      } {\n        plt.plot(seq.toPythonProxy, color = color)\n        plt.show()\n      }\n    }\n  }\n\n  def generate3DataSeqs: Seq[Seq[Double]] = {\n    val amplitude = 1.0 // Amplitude of the sine wave\n    val numSamples = 1000\n    val numSequences = 3\n    val noiseAmplitude = 0.2 // Amplitude of noise\n\n    // Generate three sequences with varying numbers of cycles\n    val sequences = (1 to numSequences).map { seqIdx =>\n      val frequency = seqIdx // Varying frequency for each sequence\n      (1 to numSamples).map { sampleIdx =>\n        val noise = (random * 2 - 1) * noiseAmplitude // Generate random noise\n        val phase = 2 * Pi * frequency * sampleIdx / numSamples\n        amplitude * sin(phase) + noise\n      }\n    }\n    sequences\n  }\n}\n\n'})}),"\n",(0,o.jsx)(n.p,{children:"Run:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"ignore",children:"scala-cli --power package --native PlotDemo.scala -o plot\n./plot\n"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>r});var t=a(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);