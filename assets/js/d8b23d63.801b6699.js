"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6779],{8231:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>d});var i=n(4848),a=n(8453),l=n(2267);const t={title:"Snippets",sidebar_position:43},c="Snippets",r={id:"guides/advanced/snippets",title:"Snippets",description:"Instead of passing paths to your sources, you can also pass the code itself with the appropriate option.",source:"@site/docs/guides/advanced/snippets.md",sourceDirName:"guides/advanced",slug:"/guides/advanced/snippets",permalink:"/docs/guides/advanced/snippets",draft:!1,unlisted:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/advanced/snippets.md",tags:[],version:"current",sidebarPosition:43,frontMatter:{title:"Snippets",sidebar_position:43},sidebar:"tutorialSidebar",previous:{title:"Piping",permalink:"/docs/guides/advanced/piping"},next:{title:"Custom Toolkit",permalink:"/docs/guides/advanced/custom-toolkit"}},p={},d=[{value:"Examples",id:"examples",level:2},{value:"Snippets and other kinds of inputs",id:"snippets-and-other-kinds-of-inputs",level:2},{value:"Referring to code from a snippet",id:"referring-to-code-from-a-snippet",level:2}];function o(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{id:"snippets",children:"Snippets"}),"\n",(0,i.jsx)(s.p,{children:"Instead of passing paths to your sources, you can also pass the code itself with the appropriate option."}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --scala-snippet '@main def hello() = println(\"Hello\")'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsx)(s.p,{children:"You can also divide your code into multiple snippets when passing it this way. Each snippet is then treated as a\nseparate input by Scala CLI."}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --scala-snippet '@main def main() = println(Messages.hello)' --scala-snippet 'object Messages { def hello = \"Hello\" }'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsx)(s.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"scripts"}),"\n"]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run -e 'println(\"Hello\")'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Scala code"}),"\n"]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --scala-snippet '@main def hello() = println(\"Hello\")'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Java code"}),"\n"]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --java-snippet 'class Hello { public static void main(String args[]) { System.out.println(\"Hello\"); } }'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"Markdown code (experimental)"}),"\n"]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --markdown-snippet '# Markdown snippet\nwith a code block\n```scala\nprintln(\"Hello\")\n```'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"a mix of Scala, Java and scripts"}),"\n"]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --scala-snippet '@main def hello() = println(s\"${JavaSnippet.hello} ${snippet.world}\")' --java-snippet 'public class JavaSnippet { public static String hello = \"Hello\"; }' --script-snippet 'def world = \"world\"'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello world\n"})})]}),"\n",(0,i.jsx)(s.h2,{id:"snippets-and-other-kinds-of-inputs",children:"Snippets and other kinds of inputs"}),"\n",(0,i.jsx)(s.p,{children:"It is also possible to mix snippets with on-disk sources."}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-scala",metastring:"title=Main.scala",children:"object Main extends App {\n  val snippetData = SnippetData()\n  println(snippetData.value)\n}\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli Main.scala --scala-snippet 'case class SnippetData(value: String = \"Hello\")'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsx)(s.p,{children:"Or even with piped ones, why not."}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo 'println(SnippetData().value)' ||  scala-cli _.sc --scala-snippet 'case class SnippetData(value: String = \"Hello\")'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsx)(s.p,{children:"Nothing stops you from mixing everything all at once, really."}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-scala",metastring:"title=Main.scala",children:'object Main extends App {\n  val scalaSnippetString = ScalaSnippet().value\n  val javaSnippetString = JavaSnippet.data\n  val scriptSnippetString = snippet.script\n  val pipedInputString = stdin.piped\n  val ondiskScriptString = ondisk.script\n  println(s"Output: $scalaSnippetString $javaSnippetString $scriptSnippetString $pipedInputString")\n}\n'})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-scala",metastring:"title=ondisk.sc",children:'def script = "on-disk-script"\n'})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo 'def piped = \"piped-script\"'|scala-cli . _.sc --scala-snippet 'case class ScalaSnippet(value: String = \"scala-snippet\")' --java-snippet 'public class JavaSnippet { public static String data = \"java-snippet\"; }' --script-snippet 'def script = \"script-snippet\"'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Output: scala-snippet java-snippet script-snippet piped-script\n"})})]}),"\n",(0,i.jsx)(s.h2,{id:"referring-to-code-from-a-snippet",children:"Referring to code from a snippet"}),"\n",(0,i.jsxs)(s.p,{children:["When referring to code coming from a script snippet passed with ",(0,i.jsx)(s.code,{children:"--script-snippet"})," (or ",(0,i.jsx)(s.code,{children:"-e"}),"), you use its wrapper\nname: ",(0,i.jsx)(s.code,{children:"snippet"})]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --scala-snippet '@main def main() = println(snippet.hello)' --script-snippet 'def hello: String = \"Hello\"'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,i.jsxs)(s.p,{children:["When referring to code coming from multiple script snippets, you use their wrapper names according to the order they\nwere passed (starting from 0 for the first script snippet): ",(0,i.jsx)(s.code,{children:"snippet${snippetNumber}"}),". The ",(0,i.jsx)(s.code,{children:"snippetNumber"})," is omitted\nfor the first script snippet (0). In other words, the first passed snippet is just ",(0,i.jsx)(s.code,{children:"snippet"}),", the second is ",(0,i.jsx)(s.code,{children:"snippet1"}),",\nthen ",(0,i.jsx)(s.code,{children:"snippet2"})," and so on, as in the example:"]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"scala-cli run --scala-snippet '@main def main() = println(s\"${snippet.hello} ${snippet1.world}${snippet2.exclamation}\")' --script-snippet 'def hello: String = \"Hello\"' --script-snippet 'def world: String = \"world\"' --script-snippet 'def exclamation: String = \"!\"'\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello world!\n"})})]}),"\n",(0,i.jsxs)(s.p,{children:["This is similar to how you refer to code from piped scripts through their wrapper name (",(0,i.jsx)(s.code,{children:"stdin"}),"), more on which can be\nfound in ",(0,i.jsx)(s.a,{href:"/docs/guides/scripting/scripts",children:"the scripts guide"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["In fact, you can refer to both kinds of scripts at one time, just keep in mind that you need to pick which script is to\nactually be run with the ",(0,i.jsx)(s.code,{children:"--main-class"})," option when multiple scripts are present on the classpath (and no non-script\nmain class was passed)."]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-scala",metastring:"title=ondisk.sc",children:'println(s"${stdin.hello} ${snippet.world}${snippet1.exclamation}")\n'})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo 'def hello = \"Hello\"' | scala-cli _.sc ondisk.sc -e 'def world = \"world\"' -e 'def exclamation = \"!\"' --main-class ondisk_sc\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"Hello world!\n"})})]}),"\n",(0,i.jsxs)(s.p,{children:["When in doubt on what main classes are available on the classpath, you can always refer to the output\nof ",(0,i.jsx)(s.code,{children:"--list-main-classes"})]}),"\n",(0,i.jsxs)(l.Z,{children:[(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"echo 'def hello = \"Hello\"' | scala-cli _.sc ondisk.sc -e 'def world = \"world\"' -e 'def exclamation = \"!\"' --list-main-classes\n"})}),(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-text",children:"ondisk_sc snippet_sc stdin_sc\n"})})]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},2267:(e,s,n)=>{n.d(s,{Z:()=>t,b:()=>c});n(6540);var i=n(3554),a=n.n(i),l=n(4848);function t(e){let{children:s}=e;return(0,l.jsx)("div",{className:"runnable-command",children:s})}function c(e){let{url:s}=e;return(0,l.jsx)(a(),{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:s})}}}]);