"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[934],{4020:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"cookbooks/introduction/scala-jvm","title":"Changing Java versions","description":"You can use Scala CLI to test your code compatibility with various versions of java, with a key point being that manual installation of a JDK/SDK is not required(!).","source":"@site/docs/cookbooks/introduction/scala-jvm.md","sourceDirName":"cookbooks/introduction","slug":"/cookbooks/introduction/scala-jvm","permalink":"/docs/cookbooks/introduction/scala-jvm","draft":false,"unlisted":false,"editUrl":"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/cookbooks/introduction/scala-jvm.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Changing Java versions","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Picking the Scala version","permalink":"/docs/cookbooks/introduction/scala-versions"},"next":{"title":"Debugging","permalink":"/docs/cookbooks/introduction/debugging"}}');var a=t(4848),o=t(8453);const s={title:"Changing Java versions",sidebar_position:3},r=void 0,l={},c=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["You can use Scala CLI to test your code compatibility with various versions of ",(0,a.jsx)(n.code,{children:"java"}),", with a key point being that manual installation of a JDK/SDK is not required(!).\nScala CLI automatically downloads the Java version you specify."]}),"\n",(0,a.jsxs)(n.p,{children:["As an example, the following snippet uses the new method ",(0,a.jsx)(n.code,{children:"Files.writeString"})," from Java 11:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-scala",metastring:"title=Main.scala",children:'import java.nio.file.Files\nimport java.nio.file.Paths\n\nobject Main extends App {\n  val dest = Files.createTempDirectory("scala-cli-demo").resolve("hello.txt")\n  val filePath = Files.writeString(dest, "Hello from ScalaCli")\n  val fileContent: String = Files.readString(filePath)\n  println(fileContent)\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To use Java 11 to run this application, pass the following ",(0,a.jsx)(n.code,{children:"--jvm"})," option to the Scala CLI command:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"ignore",children:"scala-cli --jvm temurin:11 Main.scala\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To attempt to compile the application with Java 8, change the value of the ",(0,a.jsx)(n.code,{children:"--jvm"})," parameter:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",metastring:"ignore fail",children:'scala-cli --jvm 8 Main.scala\n# In this case, it raises an error because the `Files.writeString` and `Files.readString` methods are not available in java 8\n#\n# [error] ./Main.scala:6:18\n# [error] value writeString is not a member of object java.nio.file.Files\n# [error]   val filePath = Files.writeString(dest, "Hello from ScalaCli")\n# [error]                  ^^^^^^^^^^^^^^^^^\n# [error] ./Main.scala:7:29\n# [error] value readString is not a member of object java.nio.file.Files\n# [error]   val fileContent: String = Files.readString(filePath)\n# [error]                             ^^^^^^^^^^^^^^^^\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(6540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);