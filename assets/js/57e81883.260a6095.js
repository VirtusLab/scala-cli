"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1392],{5696:(e,s,i)=>{i.d(s,{Z:()=>c,b:()=>l});i(6540);var n=i(3554),r=i.n(n),a=i(4848);function c(e){let{children:s}=e;return(0,a.jsx)("div",{className:"runnable-command",children:s})}function l(e){let{url:s}=e;return(0,a.jsx)(r(),{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:s})}},7914:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>h});const n=JSON.parse('{"id":"guides/scripting/scripts","title":"Scripts","description":"Scala CLI accepts Scala scripts as files that end in .sc.","source":"@site/docs/guides/scripting/scripts.md","sourceDirName":"guides/scripting","slug":"/guides/scripting/scripts","permalink":"/docs/guides/scripting/scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/scripting/scripts.md","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"title":"Scripts","sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"Migrating from the old Scala runner","permalink":"/docs/guides/introduction/old-runner-migration"},"next":{"title":"Shebang","permalink":"/docs/guides/scripting/shebang"}}');var r=i(4848),a=i(8453),c=i(5696);const l={title:"Scripts",sidebar_position:30},t="Scripts",d={},h=[{value:"Using multiple scripts together",id:"using-multiple-scripts-together",level:2},{value:"Define source files in using directives",id:"define-source-files-in-using-directives",level:2},{value:"Self executable Scala Script",id:"self-executable-scala-script",level:2},{value:"Arguments",id:"arguments",level:2},{value:"The name of script",id:"the-name-of-script",level:2},{value:"Script wrappers",id:"script-wrappers",level:2},{value:"Scala 2 scripts wrapper",id:"scala-2-scripts-wrapper",level:3},{value:"Scala 3 scripts wrappers",id:"scala-3-scripts-wrappers",level:3},{value:"Class Wrapper",id:"class-wrapper",level:4},{value:"Object Wrapper",id:"object-wrapper",level:4},{value:"Summary",id:"summary",level:3},{value:"Differences with Ammonite scripts",id:"differences-with-ammonite-scripts",level:2}];function o(e){const s={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"scripts",children:"Scripts"})}),"\n",(0,r.jsxs)(s.p,{children:["Scala CLI accepts Scala scripts as files that end in ",(0,r.jsx)(s.code,{children:".sc"}),".\nUnlike ",(0,r.jsx)(s.code,{children:".scala"})," files, in scripts, any kind of statement is accepted at the top-level:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=hello.sc",children:'val message = "Hello from Scala script"\nprintln(message)\n'})}),"\n",(0,r.jsx)(s.p,{children:"A script is run with the Scala CLI command:"}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"scala-cli hello.sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"Hello from Scala script\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"using-multiple-scripts-together",children:"Using multiple scripts together"}),"\n",(0,r.jsxs)(s.p,{children:["When you pass multiple scripts to Scala CLI at once (",(0,r.jsxs)(s.a,{href:"#define-source-files-in-using-directives",children:["or add them with ",(0,r.jsx)(s.code,{children:"//> using file ..."})]}),", they are all compiled together and can reference each other.\nTheir names are inferred from the file name e.g. ",(0,r.jsx)(s.code,{children:"hello.sc"})," becomes ",(0,r.jsx)(s.code,{children:"hello"})," and ",(0,r.jsx)(s.code,{children:"main.sc"})," becomes ",(0,r.jsx)(s.code,{children:"main"}),"."]}),"\n",(0,r.jsx)(s.admonition,{type:"caution",children:(0,r.jsxs)(s.p,{children:["Referencing a script from ",(0,r.jsx)(s.code,{children:"main.sc"})," is not always possible.\nMore in ",(0,r.jsx)(s.a,{href:"#scala-2-scripts-wrapper",children:"Scala 2 scripts wrapper"}),"."]})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=message.sc",children:'def msg = "from Scala script"\n'})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=hello.sc",children:'println("Hello " + message.msg)\n'})}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"scala-cli hello.sc message.sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"Hello from Scala script\n"})})]}),"\n",(0,r.jsx)(s.p,{children:"When a script is in a sub-directory, a package name is also inferred:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=my-app/constants/message.sc",children:'def msg = "Hello from Scala scripts"\n'})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=my-app/main.sc",children:'import constants.message\nprintln("Hello " + message.msg)\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Please note: when referring to code from another script, the actual relative path from the project root is used for the\npackage path. In the example above, as ",(0,r.jsx)(s.code,{children:"message.sc"})," is located in the ",(0,r.jsx)(s.code,{children:"my-app/constants/"})," directory, to use the ",(0,r.jsx)(s.code,{children:"msg"}),"\nfunction you have to call ",(0,r.jsx)(s.code,{children:"constants.message.msg"}),"."]}),"\n",(0,r.jsxs)(s.p,{children:["When referencing code from a piped script, just use ",(0,r.jsx)(s.code,{children:"stdin"}),"."]}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"echo '@main def main() = println(stdin.message)' > PrintMessage.scala\necho 'def message: String = \"Hello\"' | scala-cli PrintMessage.scala _.sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,r.jsx)(s.p,{children:"To specify a main class when running a script, use this command:"}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"scala-cli my-app --main-class main_sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"Hello from Scala scripts\n"})})]}),"\n",(0,r.jsx)(s.admonition,{type:"caution",children:(0,r.jsxs)(s.p,{children:["When specifying a main class from Scala 2 scripts, you need to use the script file name without the ",(0,r.jsx)(s.code,{children:"_sc"})," suffix.\nMore in ",(0,r.jsx)(s.a,{href:"#scala-2-scripts-wrapper",children:"Scala 2 scripts wrapper"}),"."]})}),"\n",(0,r.jsxs)(s.p,{children:["Both of the previous scripts (",(0,r.jsx)(s.code,{children:"hello.sc"})," and ",(0,r.jsx)(s.code,{children:"main.sc"}),") automatically get a main class, so this is required to\ndisambiguate them. If a main class coming from a regular ",(0,r.jsx)(s.code,{children:".scala"})," file is present in your app's context, that will be\nrun by default if the ",(0,r.jsx)(s.code,{children:"--main-class"})," param is not explicitly specified."]}),"\n",(0,r.jsxs)(s.p,{children:["When in doubt, you can always list the main classes present in your app by passing ",(0,r.jsx)(s.code,{children:"--list-main-classes"}),"."]}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"echo '@main def main1() = println(\"main1\")' > main1.scala\necho '@main def main2() = println(\"main2\")' > main2.scala\necho 'println(\"on-disk script\")' > script.sc\necho 'println(\"piped script\")' | scala-cli --list-main-classes _.sc main1.scala main2.scala script.sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"stdin_sc script_sc main2 main1\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"define-source-files-in-using-directives",children:"Define source files in using directives"}),"\n",(0,r.jsxs)(s.p,{children:["You can also add source files with the using directive ",(0,r.jsx)(s.code,{children:"//> using file"})," in Scala scripts:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=main.sc",children:"//> using file Utils.scala\n\nprintln(Utils.message)\n"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=Utils.scala",children:'object Utils {\n  val message = "Hello World"\n}\n'})}),"\n",(0,r.jsxs)(s.p,{children:["Scala CLI takes into account and compiles ",(0,r.jsx)(s.code,{children:"Utils.scala"}),"."]}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"scala-cli main.sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"Hello World\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"self-executable-scala-script",children:"Self executable Scala Script"}),"\n",(0,r.jsxs)(s.p,{children:["You can define a file with the \u201cshebang\u201d header to be self-executable. Please remember to use ",(0,r.jsx)(s.code,{children:"scala-cli shebang"}),"\ncommand, which makes Scala CLI compatible with Unix shebang interpreter directive. For example, given this script:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=HelloScript.sc",children:'#!/usr/bin/env -S scala-cli shebang\nprintln("Hello world")\n'})}),"\n",(0,r.jsx)(s.p,{children:"You can make it executable and run it, just like any other shell script:"}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"chmod +x HelloScript.sc\n./HelloScript.sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"Hello world\n"})})]}),"\n",(0,r.jsx)(s.p,{children:"It is also possible to set Scala CLI command-line options in the shebang line, for example"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=Shebang213.sc",children:"#!/usr/bin/env -S scala-cli shebang --scala-version 2.13\n"})}),"\n",(0,r.jsxs)(s.p,{children:["The command ",(0,r.jsx)(s.code,{children:"shebang"})," also allows script files to be executed even if they have no file extension,\nprovided they start with the ",(0,r.jsxs)(s.a,{href:"/docs/guides/scripting/shebang#shebang-script-headers",children:[(0,r.jsx)(s.code,{children:"shebang"})," header"]}),".\nNote that those files are always run as scripts even though they may contain e.g. valid ",(0,r.jsx)(s.code,{children:".scala"})," program."]}),"\n",(0,r.jsx)(s.h2,{id:"arguments",children:"Arguments"}),"\n",(0,r.jsxs)(s.p,{children:["You may also pass arguments to your script, and they are referenced with the special ",(0,r.jsx)(s.code,{children:"args"})," variable:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=p.sc",children:"#!/usr/bin/env -S scala-cli shebang\n\nprintln(args(1))\n"})}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"chmod +x p.sc\n./p.sc hello world\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"world\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"the-name-of-script",children:"The name of script"}),"\n",(0,r.jsxs)(s.p,{children:["You can access the name of the running script inside the script itself using the special ",(0,r.jsx)(s.code,{children:"scriptPath"})," variable:"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-scala",metastring:"title=script.sc",children:"#!/usr/bin/env -S scala-cli shebang\n\nprintln(scriptPath)\n"})}),"\n",(0,r.jsxs)(c.Z,{children:[(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"chmod +x script.sc\n./script.sc\n"})}),(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-text",children:"./script.sc\n"})})]}),"\n",(0,r.jsx)(s.h2,{id:"script-wrappers",children:"Script wrappers"}),"\n",(0,r.jsxs)(s.p,{children:["The compilation and execution of a source file containing top-level definitions is possible due to the script's code being wrapper in an additional construct and given a ",(0,r.jsx)(s.code,{children:"main"})," method.\nScala CLI as of version v1.1.0 uses three kinds of script wrappers depending on the project's configuration.\nThey each differ slightly and have different capabilities and limitations."]}),"\n",(0,r.jsx)(s.h3,{id:"scala-2-scripts-wrapper",children:"Scala 2 scripts wrapper"}),"\n",(0,r.jsxs)(s.p,{children:["For scripts compiled with Scala 2.12 and 2.13 there's only a single wrapper available.\nIt uses an object extending the ",(0,r.jsx)(s.code,{children:"App"})," trait to wrap the user's code."]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Limitations"}),(0,r.jsx)(s.br,{}),"\n","Thanks to the mechanics of ",(0,r.jsx)(s.code,{children:"App"})," in Scala 2, this wrapper has no reported limitations when it comes to the code that can be run in it."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Differences in behaviour"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["It is not possible to reference contents of a script from a file called ",(0,r.jsx)(s.code,{children:"main.sc"}),", as the name ",(0,r.jsx)(s.code,{children:"main"})," clashes with a ",(0,r.jsx)(s.code,{children:"main"})," method each wrapper contains."]}),"\n",(0,r.jsxs)(s.li,{children:["The main class name is the name of the script file without the ",(0,r.jsx)(s.code,{children:".sc"})," suffix. For example, ",(0,r.jsx)(s.code,{children:"hello.sc"})," becomes ",(0,r.jsx)(s.code,{children:"hello"}),"."]}),"\n"]}),"\n",(0,r.jsx)(s.h3,{id:"scala-3-scripts-wrappers",children:"Scala 3 scripts wrappers"}),"\n",(0,r.jsx)(s.p,{children:"For Scala 3 there are two wrappers available:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Class Wrapper - default wrapper for Scala 3 scripts"}),"\n",(0,r.jsxs)(s.li,{children:["Object Wrapper - extra wrapper that can be forced with ",(0,r.jsx)(s.code,{children:"--object-wrapper"})," flag and ",(0,r.jsx)(s.code,{children:">// using  objectWrapper"})," directive"]}),"\n"]}),"\n",(0,r.jsx)(s.h4,{id:"class-wrapper",children:"Class Wrapper"}),"\n",(0,r.jsxs)(s.p,{children:["This wrapper is the default for scripts in Scala 3, however, it cannot be used when the script is compiled for the JS platform, ",(0,r.jsx)(s.a,{href:"#object-wrapper",children:"Object Wrapper"})," is then used.\nDue to the usage of ",(0,r.jsx)(s.code,{children:"export"})," keyword it is not possible to use it in Scala 2."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Can't be used with scripts compiled for the JS platform"}),"\n",(0,r.jsx)(s.li,{children:"Can't be used in Scala 2"}),"\n",(0,r.jsxs)(s.li,{children:["When referencing types defined in the script, the type's path can be different from expected and compilation may fail with:",(0,r.jsx)(s.br,{}),"\n",(0,r.jsx)(s.code,{children:"Error: Unexpected error when compiling project: 'assertion failed: asTerm called on not-a-Term val <none>'"})]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Differences in behaviour"}),(0,r.jsx)(s.br,{}),"\n","The Class Wrapper's behaviour is the default described throughout the documentation."]}),"\n",(0,r.jsx)(s.h4,{id:"object-wrapper",children:"Object Wrapper"}),"\n",(0,r.jsxs)(s.p,{children:["This wrapper is an alternative to the ",(0,r.jsx)(s.a,{href:"#class-wrapper",children:"Class Wrapper"})," and can be forced with ",(0,r.jsx)(s.code,{children:"--object-wrapper"})," flag and ",(0,r.jsx)(s.code,{children:">// using  objectWrapper"})," directive.\nIt is used by default for Scala 3 scripts compiled for JS platform. Can suffer from deadlocks when using multithreaded code."]}),"\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Limitations"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["When running background threads from the script and using e.g. ",(0,r.jsx)(s.code,{children:"scala.concurrent.Await"})," on them may result in a deadlock due to unfinished initialization of the wrapper object."]}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"Differences in behaviour"}),(0,r.jsx)(s.br,{}),"\n","The Object Wrapper's behaviour is the default described throughout the documentation."]}),"\n",(0,r.jsx)(s.h3,{id:"summary",children:"Summary"}),"\n",(0,r.jsx)(s.p,{children:"The wrapper type used according to the configuration used ((platform + forced type) X Scala version) is summarized in the table below:"}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{}),(0,r.jsx)(s.th,{children:"Scala 2.12"}),(0,r.jsx)(s.th,{children:"Scala 2.13"}),(0,r.jsx)(s.th,{children:"Scala 3"})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">// using platform jvm"})}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"Class Wrapper"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">// using platform native"})}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"Class Wrapper"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">// using platform js"})}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"Object Wrapper"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:(0,r.jsx)(s.code,{children:">// using objectWrapper"})}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"App Wrapper"}),(0,r.jsx)(s.td,{children:"Object Wrapper"})]})]})]}),"\n",(0,r.jsx)(s.h2,{id:"differences-with-ammonite-scripts",children:"Differences with Ammonite scripts"}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.a,{href:"http://ammonite.io",children:"Ammonite"})," is a popular REPL for Scala that can also compile and run ",(0,r.jsx)(s.code,{children:".sc"})," files."]}),"\n",(0,r.jsx)(s.p,{children:"Scala CLI and Ammonite are similar, but differ significantly when your code is split in multiple scripts:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["In Ammonite, a script needs to use ",(0,r.jsx)(s.code,{children:"import $file"})," directives to use values defined in another script"]}),"\n",(0,r.jsx)(s.li,{children:"With Scala CLI, all scripts passed can reference each other without such directives"}),"\n"]}),"\n",(0,r.jsx)(s.p,{children:"On the other hand:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:['You can pass a single "entry point" script as input to Ammonite, and Ammonite finds the scripts it depends on via\nthe ',(0,r.jsx)(s.code,{children:"import $file"})," directives"]}),"\n",(0,r.jsxs)(s.li,{children:["Scala CLI requires all scripts to be added with ",(0,r.jsx)(s.code,{children:"//> using file ..."})," or to be passed beforehand, either one-by-one, or by putting them in a directory, and\npassing the directory to Scala CLI"]}),"\n"]})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);