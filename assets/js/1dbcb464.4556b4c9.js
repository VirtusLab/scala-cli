"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4521],{7797:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"cookbooks/introduction/scala-scripts","title":"Running Scala Scripts","description":"Scala Scripts","source":"@site/docs/cookbooks/introduction/scala-scripts.md","sourceDirName":"cookbooks/introduction","slug":"/cookbooks/introduction/scala-scripts","permalink":"/docs/cookbooks/introduction/scala-scripts","draft":false,"unlisted":false,"editUrl":"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/cookbooks/introduction/scala-scripts.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Running Scala Scripts","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Filter the test suites to run","permalink":"/docs/cookbooks/introduction/test-only"},"next":{"title":"Scripts with instant startup","permalink":"/docs/cookbooks/introduction/instant-startup-scala-scripts"}}');var t=n(4848),c=n(8453);const i={title:"Running Scala Scripts",sidebar_position:6},r=void 0,l={},o=[{value:"Scala Scripts",id:"scala-scripts",level:2},{value:"Run",id:"run",level:3},{value:"Features",id:"features",level:2},{value:"Package",id:"package",level:3},{value:"Watch mode",id:"watch-mode",level:3}];function d(e){const a={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.h2,{id:"scala-scripts",children:"Scala Scripts"}),"\n",(0,t.jsx)(a.p,{children:"Scala scripts are files that contain Scala code without a main method.\nThese source code files don't require build-tool configurations.\nTo run Scala scripts very quickly without waiting the need for build tools, use Scala CLI."}),"\n",(0,t.jsx)(a.h3,{id:"run",children:"Run"}),"\n",(0,t.jsx)(a.p,{children:"For example, given this simple script:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",metastring:"title=HelloScript.sc",children:'val sv = scala.util.Properties.versionNumberString\n\nval message = s"Hello from Scala ${sv}, Java ${System.getProperty("java.version")}"\nprintln(message)\n'})}),"\n",(0,t.jsx)(a.p,{children:"You can run it directly with Scala CLI \u2014 there's no need for a build tool or additional configuration:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"scala-cli run HelloScript.sc\n"})}),"\n",(0,t.jsx)(a.p,{children:'Alternatively, you can add a "shebang" header to your script, make it executable, and execute it directly with Scala CLI. For example, given this script with a header that invokes Scala CLI:'}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",metastring:"title=HelloScriptSheBang.sc",children:'#!/usr/bin/env -S scala-cli shebang\n\nval sv = scala.util.Properties.versionNumberString\n\ndef printMessage(): Unit =\n  val message = s"Hello from Scala ${sv}, Java ${System.getProperty("java.version")}"\n  println(message)\n\nprintMessage()\n'})}),"\n",(0,t.jsx)(a.p,{children:"You can make it executable and then run it like this:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"chmod +x HelloScriptSheBang.sc\n./HelloScriptSheBang.sc\n# Hello from Scala 2.13.6, Java 16.0.1\n"})}),"\n",(0,t.jsx)(a.p,{children:"You can also pass command line arguments to Scala scripts:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-scala",metastring:"title=ScriptArguments.sc",children:"#!/usr/bin/env -S scala-cli shebang\nprintln(args(1))\n"})}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"chmod +x ScriptArguments.sc\n./ScriptArguments.sc foo bar\n# bar\n"})}),"\n",(0,t.jsxs)(a.p,{children:["As shown, command line arguments are accessed through the special ",(0,t.jsx)(a.code,{children:"args"})," variable."]}),"\n",(0,t.jsx)(a.h2,{id:"features",children:"Features"}),"\n",(0,t.jsx)(a.p,{children:"All of the features shown for non-scripts work for Scala scripts as well, such as waiting for changes (watch mode), dependency menagement, packaging, compiling, etc."}),"\n",(0,t.jsx)(a.h3,{id:"package",children:"Package"}),"\n",(0,t.jsxs)(a.p,{children:["For example, run the ",(0,t.jsx)(a.code,{children:"package"})," sub-command to package your script as a lightweight executable JAR file:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",children:"scala-cli --power package HelloScript.sc\n./HelloScript\n"})}),"\n",(0,t.jsx)(a.h3,{id:"watch-mode",children:"Watch mode"}),"\n",(0,t.jsxs)(a.p,{children:["As another example, pass ",(0,t.jsx)(a.code,{children:"--watch"})," to Scala CLI to watch all source files for changes, and then re-run them when there is a change:"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-bash",metastring:"ignore",children:"scala-cli --watch HelloScript.sc\n"})})]})}function h(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>i,x:()=>r});var s=n(6540);const t={},c=s.createContext(t);function i(e){const a=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(c.Provider,{value:a},e.children)}}}]);