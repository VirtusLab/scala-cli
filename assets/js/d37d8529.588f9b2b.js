"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3435],{4667:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"commands/compile","title":"Compile","description":"Scala CLI compiles your code with its compile command:","source":"@site/docs/commands/compile.md","sourceDirName":"commands","slug":"/commands/compile","permalink":"/docs/commands/compile","draft":false,"unlisted":false,"editUrl":"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/commands/compile.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Compile","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Basics","permalink":"/docs/commands/basics"},"next":{"title":"Run","permalink":"/docs/commands/run"}}');var a=n(4848),l=n(8453),c=n(5696);const o={title:"Compile",sidebar_position:5},r=void 0,t={},d=[{value:"Test scope",id:"test-scope",level:2},{value:"Watch mode",id:"watch-mode",level:2},{value:"Scala version",id:"scala-version",level:2},{value:"Scala Nightlies",id:"scala-nightlies",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Scala compiler options",id:"scala-compiler-options",level:2},{value:"Passing compiler options with <code>-O</code>",id:"passing-compiler-options-with--o",level:3},{value:"Passing compiler options with <code>using</code> directives",id:"passing-compiler-options-with-using-directives",level:3},{value:"Compiler options recognised even when passed without <code>-O</code>",id:"compiler-options-recognised-even-when-passed-without--o",level:3},{value:"Java options for the compiler",id:"java-options-for-the-compiler",level:3},{value:"Compiler options redirected to Scala CLI alternatives",id:"compiler-options-redirected-to-scala-cli-alternatives",level:3},{value:"Scala compiler help",id:"scala-compiler-help",level:3},{value:"Scala compiler plugins",id:"scala-compiler-plugins",level:2},{value:"Printing a class path",id:"printing-a-class-path",level:2},{value:"JVM options",id:"jvm-options",level:3},{value:"Exclude sources",id:"exclude-sources",level:2},{value:"Compile-Only Dependencies",id:"compile-only-dependencies",level:2}];function h(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.p,{children:["Scala CLI compiles your code with its ",(0,a.jsx)(s.code,{children:"compile"})," command:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"title=Hello.scala",children:'object Hello {\n  def main(args: Array[String]): Unit =\n    println("Hello")\n}\n'})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile Hello.scala\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Note that most Scala CLI commands automatically compile your code, if necessary.\nThe ",(0,a.jsx)(s.code,{children:"compile"})," command is useful if you want to check that your code compiles\n(or to see the compilation warnings, if any occur) without running it or packaging it."]}),"\n",(0,a.jsxs)(s.p,{children:["The most common ",(0,a.jsx)(s.code,{children:"compile"})," options are shown below.\nFor a full list of options, run ",(0,a.jsx)(s.code,{children:"scala-cli compile --help"}),", or check the options linked in the\n",(0,a.jsx)(s.a,{href:"/docs/reference/commands#compile",children:"reference documentation"}),"."]}),"\n",(0,a.jsx)(s.h2,{id:"test-scope",children:"Test scope"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"--test"})," makes Scala CLI compile main and test scopes:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"title=Sample.test.scala",children:'//> using dep org.scalameta::munit:1.0.2\nclass Test extends munit.FunSuite {\n  test("sample") {\n    assert(2 + 2 == 4)\n  }\n}\n'})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile --test Sample.test.scala\n"})}),"\n",(0,a.jsx)(s.h2,{id:"watch-mode",children:"Watch mode"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"--watch"})," makes Scala CLI watch your code for changes, and re-compiles it upon any change:"]}),"\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",metastring:"ignore",children:"scala-cli compile --watch Hello.scala\n"})}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:"Compiling project-cef76d561e (1 Scala source)\nCompiled 'project-cef76d561e'\nWatching sources, press Ctrl+C to exit.\nCompiling project-cef76d561e (1 Scala source)\nCompiled 'project-cef76d561e'\nWatching sources, press Ctrl+C to exit.\n"})})]}),"\n",(0,a.jsx)(s.h2,{id:"scala-version",children:"Scala version"}),"\n",(0,a.jsxs)(s.p,{children:["Scala CLI uses the latest stable version of Scala which was tested in Scala CLI (see our list\nof ",(0,a.jsx)(s.a,{href:"../reference/scala-versions",children:"Supported Scala Versions"}),"). You can specify the Scala version you'd like to use\nwith ",(0,a.jsx)(s.code,{children:"--scala"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile --scala 2.13.15 Hello.scala\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Scala CLI works with all major ",(0,a.jsx)(s.code,{children:"2.12.x"}),", ",(0,a.jsx)(s.code,{children:"2.13.x"}),", and ",(0,a.jsx)(s.code,{children:"3.x"})," Scala versions."]}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"--scala"}),' also accepts "short" Scala versions, such as ',(0,a.jsx)(s.code,{children:"2.12"}),", ",(0,a.jsx)(s.code,{children:"2"}),", or ",(0,a.jsx)(s.code,{children:"3"}),". In this\ncase, it picks the highest corresponding stable Scala version:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile --scala 2.12 Hello.scala\nscala-cli compile --scala 2 Hello.scala\nscala-cli compile --scala 3 Hello.scala\n"})}),"\n",(0,a.jsx)(s.h2,{id:"scala-nightlies",children:"Scala Nightlies"}),"\n",(0,a.jsx)(s.p,{children:"The nightly builds of Scala compiler are the unstable ones which are published on a nightly basis."}),"\n",(0,a.jsxs)(s.p,{children:["To use the latest Scala 2 and Scala 3 nightly builds, pass ",(0,a.jsx)(s.code,{children:"2.nightly"})," and ",(0,a.jsx)(s.code,{children:"3.nightly"}),", respectively.\nYou can also request the last ",(0,a.jsx)(s.code,{children:"2.12.nightly"})," and ",(0,a.jsx)(s.code,{children:"2.13.nightly"})," versions. ",(0,a.jsx)(s.code,{children:"2.13.nightly"})," is the same as ",(0,a.jsx)(s.code,{children:"2.nightly"}),".\nMoreover, passing in the ",(0,a.jsx)(s.code,{children:"3.{sub binary number}.nightly"})," format, such as ",(0,a.jsx)(s.code,{children:"3.0.nightly"})," or ",(0,a.jsx)(s.code,{children:"3.1.nightly"})," is accepted,\ntoo."]}),"\n",(0,a.jsxs)(s.p,{children:["Scala CLI takes care of fetching the nightly builds of Scala 2 and Scala 3 from different repositories, without you\nhaving to pass their addresses as input after the ",(0,a.jsx)(s.code,{children:"--repo"})," flag."]}),"\n",(0,a.jsx)(s.p,{children:"For compiling with the latest Scala 2 nightly build:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",metastring:"ignore",children:"scala-cli Hello.scala -S 2.nightly\n"})}),"\n",(0,a.jsx)(s.p,{children:"For compiling with the latest Scala 3 nightly build:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli Hello.scala -S 3.nightly\n"})}),"\n",(0,a.jsx)(s.p,{children:"For compiling with a specific nightly build you have the full version:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",metastring:"ignore",children:"scala-cli Hello.scala -S 2.13.9-bin-4505094\n"})}),"\n",(0,a.jsxs)(s.p,{children:["For setting this inside scala files, use ",(0,a.jsxs)(s.a,{href:"/docs/guides/introduction/using-directives",children:[(0,a.jsx)(s.code,{children:"using"})," directives"]}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"//> using scala 2.nightly\n"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"compile",children:"//> using scala 3.nightly\n"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",children:"//> using scala 2.13.9-bin-4505094\n"})}),"\n",(0,a.jsx)(s.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,a.jsxs)(s.p,{children:["You can add dependencies on the command-line with ",(0,a.jsx)(s.code,{children:"--dependency"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile Hello.scala \\\n  --dependency org.scala-lang.modules::scala-parallel-collections:1.0.4\n"})}),"\n",(0,a.jsxs)(s.p,{children:["Note that ",(0,a.jsx)(s.code,{children:"--dependency"})," is only meant as a convenience. You should favor\nadding dependencies in the source files themselves via ",(0,a.jsxs)(s.a,{href:"/docs/guides/introduction/configuration#special-imports",children:[(0,a.jsx)(s.code,{children:"using"})," directives"]}),"."]}),"\n",(0,a.jsxs)(s.p,{children:["You can also add simple JAR files \u2014 those that don\u2019t have transitive dependencies \u2014 as dependencies, with ",(0,a.jsx)(s.code,{children:"--jar"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile Hello.scala --jar /path/to/library.jar\n"})}),"\n",(0,a.jsxs)(s.p,{children:["See the ",(0,a.jsx)(s.a,{href:"/docs/guides/introduction/dependencies",children:"Dependency management"})," guide for more details."]}),"\n",(0,a.jsx)(s.h2,{id:"scala-compiler-options",children:"Scala compiler options"}),"\n",(0,a.jsxs)(s.h3,{id:"passing-compiler-options-with--o",children:["Passing compiler options with ",(0,a.jsx)(s.code,{children:"-O"})]}),"\n",(0,a.jsxs)(s.p,{children:["All ",(0,a.jsx)(s.a,{href:"https://docs.scala-lang.org/overviews/compiler-options",children:"Scala compiler options"})," can be passed to Scala CLI\nwith ",(0,a.jsx)(s.code,{children:"-O"}),":"]}),"\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile Hello.scala -O -deprecation -O -Xlint:infer-any\n"})}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:"[warn] ./Hello.scala:3:7: method x in class Some is deprecated (since 2.12.0): Use .value instead.\n[warn]   opt.x\n[warn]       ^\n"})})]}),"\n",(0,a.jsxs)(s.p,{children:["Passing a value to a compiler option requires another ",(0,a.jsx)(s.code,{children:"-O"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli -O -Xshow-phases -O -color -O never\n"})}),"\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsxs)(s.p,{children:["Scala CLI uses ",(0,a.jsx)(s.code,{children:"bloop"})," by default, which at times gets in the way of getting the full compiler output.\nIn the case of some compiler options it may be necessary to turn ",(0,a.jsx)(s.code,{children:"bloop"})," off with ",(0,a.jsx)(s.code,{children:"--server=false"}),".\nThe Scala CLI team is actively trying to minimize such cases, but for the time being it's a useful workaround."]})}),"\n",(0,a.jsxs)(s.h3,{id:"passing-compiler-options-with-using-directives",children:["Passing compiler options with ",(0,a.jsx)(s.code,{children:"using"})," directives"]}),"\n",(0,a.jsxs)(s.p,{children:["It is also possible to pass compiler options with the appropriate ",(0,a.jsx)(s.code,{children:"using"})," directives."]}),"\n",(0,a.jsx)(s.p,{children:"A single option can be passed like this:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"compile",children:'//> using option -new-syntax\n@main def hello = if true then println("Hello")\n'})}),"\n",(0,a.jsx)(s.p,{children:"It's also possible to pass a value to the option with the same directive:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"compile",children:"//> using option -release 11\n\nimport java.net.http.HttpRequest\n"})}),"\n",(0,a.jsx)(s.p,{children:"There's a separate directive for passing multiple options at one time:"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"compile",children:'//> using options -new-syntax -rewrite -source:3.2-migration\n\n@main def hello = if (true) println("Hello")\n'})}),"\n",(0,a.jsxs)(s.h3,{id:"compiler-options-recognised-even-when-passed-without--o",children:["Compiler options recognised even when passed without ",(0,a.jsx)(s.code,{children:"-O"})]}),"\n",(0,a.jsxs)(s.p,{children:["For ease of use many compiler options can be passed as-is to Scala CLI, without the need of passing after ",(0,a.jsx)(s.code,{children:"-O"}),":"]}),"\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile Hello.scala -Xlint:infer-any\n\n"})}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:'Compiling project (1 Scala source)\n[warn] ./Hello.scala:2:11: a type was inferred to be `Any`; this may indicate a programming error.\n[warn]   val l = List("a", true, 2, new Object)\n[warn]           ^\nCompiled project\n'})})]}),"\n",(0,a.jsx)(s.p,{children:"Those include:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["all options which start with:","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-g"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-language"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-opt"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-P"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-target"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-source"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-V"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-W"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-X"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-Y"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["the following flags:","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-nowarn"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-feature"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-deprecation"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-rewrite"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-old-syntax"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-new-syntax"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-indent"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-no-indent"})}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.li,{children:["the following options which accept values (which can be passed similarly to any regular Scala CLI option values)","\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-encoding"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-release"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-color"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-classpath"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-d"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["All options mentioned above are assumed to be Scala compiler options and are being passed as such to the compiler even\nwithout ",(0,a.jsx)(s.code,{children:"-O"}),". (However, they can still be passed with ",(0,a.jsx)(s.code,{children:"-O"}),", regardless.)"]}),"\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsxs)(s.p,{children:["Some compiler options (e.g. ",(0,a.jsx)(s.code,{children:"-new-syntax"}),") may be Scala-version-specific.\nThus, it may happen that Scala CLI will pass those to the compiler,\nbut they will not be recognised if they're not supported in a given Scala version.\nIn such a case, refer to the ",(0,a.jsx)(s.code,{children:"--scalac-help"})," output while passing the appropriate version with ",(0,a.jsx)(s.code,{children:"-S"}),"."]})}),"\n",(0,a.jsx)(s.h3,{id:"java-options-for-the-compiler",children:"Java options for the compiler"}),"\n",(0,a.jsx)(s.p,{children:"There are two ways to pass Java options to the compiler:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"--bloop-java-opt"})," when using the build server, which is the default, e.g. ",(0,a.jsx)(s.code,{children:"--bloop-java-opt -XX:MaxHeapSize=8g"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"//> using options"})," or ",(0,a.jsx)(s.code,{children:"--scalac-opt"})," with arguments prefixed by ",(0,a.jsx)(s.code,{children:"-J"}),", e.g. ",(0,a.jsx)(s.code,{children:"//> using options -J-XX:MaxHeapSize=8g"}),",\nthis will work only when the build server is disabled (with ",(0,a.jsx)(s.code,{children:"--server=false"}),")."]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"compiler-options-redirected-to-scala-cli-alternatives",children:"Compiler options redirected to Scala CLI alternatives"}),"\n",(0,a.jsxs)(s.p,{children:["In a few cases, certain compiler options are being auto-redirected to a corresponding Scala CLI-specific option for\nbetter integration with other functionalities of the tool.\nThe redirection happens even when the options are passed with ",(0,a.jsx)(s.code,{children:"-O"}),", making them effectively aliases for their\nScala CLI counterparts."]}),"\n",(0,a.jsx)(s.p,{children:"Those include:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"-classpath"})," being redirected to ",(0,a.jsx)(s.code,{children:"--classpath"})]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"-d"})," being redirected to ",(0,a.jsx)(s.code,{children:"--compilation-output"})]}),"\n"]}),"\n",(0,a.jsx)(s.h3,{id:"scala-compiler-help",children:"Scala compiler help"}),"\n",(0,a.jsx)(s.p,{children:"Certain compiler options allow to view relevant help. Inputs aren't required when those are passed.\n(since they would be disregarded anyway)"}),"\n",(0,a.jsx)(s.p,{children:"Those include:"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-help"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-V"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-W"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-X"})}),"\n",(0,a.jsx)(s.li,{children:(0,a.jsx)(s.code,{children:"-Y"})}),"\n"]}),"\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli -S 2.12.17 -Xshow-phases\n"})}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:"\n     phase name  id  description\n     ----------  --  -----------\n         parser   1  parse source into ASTs, perform simple desugaring\n          namer   2  resolve names, attach symbols to named trees\n packageobjects   3  load package objects\n          typer   4  the meat and potatoes: type the trees\n         patmat   5  translate match expressions\n superaccessors   6  add super accessors in traits and nested classes\n     extmethods   7  add extension methods for inline classes\n        pickler   8  serialize symbol tables\n      refchecks   9  reference/override checking, translate nested objects\n        uncurry  10  uncurry, translate function values to anonymous classes\n         fields  11  synthesize accessors and fields, add bitmaps for lazy vals\n      tailcalls  12  replace tail calls by jumps\n     specialize  13  @specialized-driven class and method specialization\n  explicitouter  14  this refs to outer pointers\n        erasure  15  erase types, add interfaces for traits\n    posterasure  16  clean up erased inline classes\n     lambdalift  17  move nested functions to top level\n   constructors  18  move field definitions into constructors\n        flatten  19  eliminate inner classes\n          mixin  20  mixin composition\n        cleanup  21  platform-specific cleanups, generate reflective calls\n     delambdafy  22  remove lambdas\n            jvm  23  generate JVM bytecode\n       terminal  24  the last phase during a compilation run\n"})})]}),"\n",(0,a.jsxs)(s.p,{children:["You can also view the Scala compiler help for a particular Scala version with ",(0,a.jsx)(s.code,{children:"--scalac-help"}),", which is just an alias\nfor ",(0,a.jsx)(s.code,{children:"-O -help"}),".\nPlease note that ",(0,a.jsx)(s.code,{children:"-help"})," passed without ",(0,a.jsx)(s.code,{children:"-O"})," will show the Scala CLI help instead."]}),"\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli -S 2.13.8 --scalac-help\n"})}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:"Usage: scalac <options> <source files>\n\nStandard options:\n  -Dproperty=value             Pass -Dproperty=value directly to the runtime system.\n  -J<flag>                     Pass <flag> directly to the runtime system.\n  -P:<plugin>:<opt>            Pass an option to a plugin\n  -V                           Print a synopsis of verbose options. [false]\n  -W                           Print a synopsis of warning options. [false]\n  -Werror                      Fail the compilation if there are any warnings. [false]\n  -X                           Print a synopsis of advanced options. [false]\n  -Y                           Print a synopsis of private options. [false]\n  -bootclasspath <path>        Override location of bootstrap class files.\n  -classpath <path>            Specify where to find user class files.\n  -d <directory|jar>           destination for generated classfiles.\n  -dependencyfile <file>       Set dependency tracking file.\n  -deprecation                 Emit warning and location for usages of deprecated APIs. See also -Wconf. [false]\n  -encoding <encoding>         Specify character encoding used by source files.\n  -explaintypes                Explain type errors in more detail. [false]\n  -extdirs <path>              Override location of installed extensions.\n  -feature                     Emit warning and location for usages of features that should be imported explicitly. See also -Wconf. [false]\n  -g:<level>                   Set level of generated debugging info. (none,source,line,[vars],notailcalls)\n  -help                        Print a synopsis of standard options [false]\n  -javabootclasspath <path>    Override java boot classpath.\n  -javaextdirs <path>          Override java extdirs classpath.\n  -language:<features>         Enable or disable language features\n  -no-specialization           Ignore @specialize annotations. [false]\n  -nobootcp                    Do not use the boot classpath for the scala jars. [false]\n  -nowarn                      Generate no warnings. [false]\n  -opt:<optimizations>         Enable optimizations, `help` for details.\n  -opt-inline-from:<patterns>  Patterns for classfile names from which to allow inlining, `help` for details.\n  -opt-warnings:<warnings>     Enable optimizer warnings, `help` for details.\n  -print                       Print program with Scala-specific features removed. [false]\n  -release <release>           Compile for a specific version of the Java platform. Supported targets: 6, 7, 8, 9\n  -rootdir <path>              The absolute path of the project root directory, usually the git/scm checkout. Used by -Wconf.\n  -sourcepath <path>           Specify location(s) of source files.\n  -target:<target>             Target platform for object files. ([8],9,10,11,12,13,14,15,16,17,18)\n  -toolcp <path>               Add to the runner classpath.\n  -unchecked                   Enable additional warnings where generated code depends on assumptions. See also -Wconf. [false]\n  -uniqid                      Uniquely tag all identifiers in debugging output. [false]\n  -usejavacp                   Utilize the java.class.path in classpath resolution. [false]\n  -usemanifestcp               Utilize the manifest in classpath resolution. [false]\n  -verbose                     Output messages about what the compiler is doing. [false]\n  -version                     Print product version and exit. [false]\n  @<file>                      A text file containing compiler arguments (options and source files) [false]\n\nDeprecated settings:\n  -optimize                    Enables optimizations. [false]\n                               deprecated: Since 2.12, enables -opt:l:inline -opt-inline-from:**. See -opt:help.\n"})})]}),"\n",(0,a.jsx)(s.h2,{id:"scala-compiler-plugins",children:"Scala compiler plugins"}),"\n",(0,a.jsxs)(s.p,{children:["Use ",(0,a.jsx)(s.code,{children:"--compiler-plugin"})," to add compiler plugin dependencies:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile Hello.scala --compiler-plugin org.typelevel:::kind-projector:0.13.3 --scala 2.13.13\n"})}),"\n",(0,a.jsx)(s.h2,{id:"printing-a-class-path",children:"Printing a class path"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"--print-class-path"})," makes ",(0,a.jsx)(s.code,{children:"scala-cli compile"})," print a class path:"]}),"\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli compile --print-class-path Hello.scala\n"})}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:"/work/.scala/project-cef76d561e/classes:~/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.12.14/scala-library-2.12.14.jar:~/Library/Caches/ScalaCli/local-repo/0.1.0/org.virtuslab.scala-cli/runner_2.12/0.0.1-SNAPSHOT/jars/runner_2.12.jar:~/Library/Caches/ScalaCli/local-repo/0.1.0/org.virtuslab.scala-cli/stubs/0.0.1-SNAPSHOT/jars/stubs.jar\n"})})]}),"\n",(0,a.jsxs)(s.p,{children:["This is handy when working with other tools.\nFor example, you can pass this class path to ",(0,a.jsx)(s.code,{children:"java -cp"}),":"]}),"\n",(0,a.jsxs)(c.Z,{children:[(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'java -cp "$(scala-cli compile --print-class-path Hello.scala)" Hello\n'})}),(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:"Hello\n"})})]}),"\n",(0,a.jsxs)(s.p,{children:["Note that you should favor the ",(0,a.jsx)(s.a,{href:"/docs/commands/run",children:(0,a.jsx)(s.code,{children:"run"})})," command to run your code, rather than running ",(0,a.jsx)(s.code,{children:"java -cp"}),".\nThe class path obtained this way is only meant for scenarios where Scala CLI doesn't offer a more convenient option."]}),"\n",(0,a.jsxs)(s.p,{children:["If you need the class path to consist only of JAR files, pass ",(0,a.jsx)(s.code,{children:"--as-jar"}),". This packages the Scala CLI project\nbyte code in a JAR file, rather than leaving it in a directory:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",metastring:"ignore",children:"scala-cli compile --print-class-path Hello.scala --as-jar\n"})}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-text",children:"/work/.scala-build/project_103be31561-475e1607f5/jar/library.jar:~/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala3-library_3/3.2.2/scala3-library_3-3.2.2.jar:~/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/scala-lang/scala-library/2.13.10/scala-library-2.13.10.jar\n"})}),"\n",(0,a.jsx)(s.h3,{id:"jvm-options",children:"JVM options"}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"--javac-opt"})," lets you add ",(0,a.jsx)(s.code,{children:"javac"})," options which will be passed when compiling sources."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:"scala-cli Hello.scala --javac-opt source --javac-opt 1.8 --javac-opt target --javac-opt 1.8\n"})}),"\n",(0,a.jsxs)(s.p,{children:["You can also add javac options with the using directive ",(0,a.jsx)(s.code,{children:"//> using javacOpt"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"compile",children:"//> using javacOpt source 1.8 target 1.8\n"})}),"\n",(0,a.jsx)(s.h2,{id:"exclude-sources",children:"Exclude sources"}),"\n",(0,a.jsxs)(s.p,{children:["To exclude specific source files or entire directories from a Scala CLI project, use the ",(0,a.jsx)(s.code,{children:"exclude"})," directive or command\nline parameter ",(0,a.jsx)(s.code,{children:"--exclude"})," along with a pattern:"]}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["an absolute path: ",(0,a.jsx)(s.code,{children:"/root/path/to/your/project/Main.scala"})]}),"\n",(0,a.jsxs)(s.li,{children:["a relative path: ",(0,a.jsx)(s.code,{children:"src/main/scala/Main.scala"})]}),"\n",(0,a.jsxs)(s.li,{children:["a glob pattern: ",(0,a.jsx)(s.code,{children:"*.sc"})]}),"\n"]}),"\n",(0,a.jsx)(s.admonition,{type:"note",children:(0,a.jsxs)(s.p,{children:["The ",(0,a.jsx)(s.code,{children:"exclude"})," directive should be placed in your ",(0,a.jsx)(s.code,{children:"project.scala"})," file, which Scala CLI uses to determine the project\nroot directory.\nFor more details on ",(0,a.jsx)(s.code,{children:"project.file"}),", see ",(0,a.jsxs)(s.a,{href:"../reference/root-dir",children:["the ",(0,a.jsx)(s.code,{children:"Project root directory"})," reference"]}),"."]})}),"\n",(0,a.jsxs)(s.p,{children:["For example, to exclude all files in the ",(0,a.jsx)(s.code,{children:"example/scala"})," directory, add the following directive to your\n",(0,a.jsx)(s.code,{children:"project.file"})," file:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"title=project.scala",children:"//> using exclude example/scala\n"})}),"\n",(0,a.jsx)(s.h2,{id:"compile-only-dependencies",children:"Compile-Only Dependencies"}),"\n",(0,a.jsx)(s.p,{children:"Compile-only dependencies, allow to include certain libraries exclusively at the time of the compilation. These\ndependencies are added to the class path during compilation, but won't be included when the application is run."}),"\n",(0,a.jsxs)(s.p,{children:["To declare a compile-only dependency, you should use the ",(0,a.jsx)(s.code,{children:"compileOnly.dep"})," directive or ",(0,a.jsx)(s.code,{children:"--compile-lib"})," command line\noption. For instance, to include the ",(0,a.jsx)(s.code,{children:"jsoniter-scala-macros"})," library at compile-time, you would use:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-scala",metastring:"title=CompileOnly.scala",children:"//> using compileOnly.dep com.github.plokhotnyuk.jsoniter-scala::jsoniter-scala-macros:2.23.2\n"})}),"\n",(0,a.jsxs)(s.p,{children:["or by using the ",(0,a.jsx)(s.code,{children:"--compile-lib"})," command line option:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-bash",children:'scala-cli Hello.scala --compile-lib "com.github.plokhotnyuk.jsoniter-scala::jsoniter-scala-macros:2.23.2"\n'})})]})}function p(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},5696:(e,s,n)=>{n.d(s,{Z:()=>c,b:()=>o});n(6540);var i=n(3554),a=n.n(i),l=n(4848);function c(e){let{children:s}=e;return(0,l.jsx)("div",{className:"runnable-command",children:s})}function o(e){let{url:s}=e;return(0,l.jsx)(a(),{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:s})}}}]);