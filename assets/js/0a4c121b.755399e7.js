"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9045],{2165:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>g,frontMatter:()=>c,metadata:()=>a,toc:()=>h});const a=JSON.parse('{"id":"guides/scripting/shebang","title":"Shebang","description":"This guide explains the differences between the run and shebang sub-commands, mainly covering how each of them","source":"@site/docs/guides/scripting/shebang.md","sourceDirName":"guides/scripting","slug":"/guides/scripting/shebang","permalink":"/docs/guides/scripting/shebang","draft":false,"unlisted":false,"editUrl":"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/scripting/shebang.md","tags":[],"version":"current","sidebarPosition":31,"frontMatter":{"title":"Shebang","sidebar_position":31},"sidebar":"tutorialSidebar","previous":{"title":"Scripts","permalink":"/docs/guides/scripting/scripts"},"next":{"title":"Scala.js","permalink":"/docs/guides/advanced/scala-js"}}');var l=s(4848),i=s(8453),r=s(5696);const c={title:"Shebang",sidebar_position:31},t=void 0,d={},h=[{value:"<code>shebang</code> script headers",id:"shebang-script-headers",level:3},{value:"<code>shebang</code> and the command line",id:"shebang-and-the-command-line",level:3},{value:"Script files&#39; extensions",id:"script-files-extensions",level:3}];function o(e){const n={admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["This guide explains the differences between the ",(0,l.jsx)(n.code,{children:"run"})," and ",(0,l.jsx)(n.code,{children:"shebang"})," sub-commands, mainly covering how each of them\nparses its arguments."]}),"\n",(0,l.jsxs)(n.h3,{id:"shebang-script-headers",children:[(0,l.jsx)(n.code,{children:"shebang"})," script headers"]}),"\n",(0,l.jsxs)(n.p,{children:["Before proceeding, let's discuss how Scala CLI works in a script without the ",(0,l.jsx)(n.code,{children:"shebang"})," command.\nHere is a simple ",(0,l.jsx)(n.code,{children:"hello.sc"})," script with a ",(0,l.jsx)(n.code,{children:"shebang"})," header:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:"title=hello.sc",children:"#!/usr/bin/env -S scala-cli -S 3\n\nprintln(args.size)\nprintln(args.headOption)\n"})}),"\n",(0,l.jsx)(n.p,{children:"And it works correctly:"}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"chmod +x hello.sc\n./hello.sc    \n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"0\nNone\n"})})]}),"\n",(0,l.jsx)(n.p,{children:"And it also works:"}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"./hello.sc -- Hello World\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"2\nSome(Hello)\n"})})]}),"\n",(0,l.jsxs)(n.p,{children:["Note that the extra ",(0,l.jsx)(n.code,{children:"--"})," must be added to make it work. If it is not supplied, the result is:"]}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:"run-fail",children:"./hello.sc Hello World\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"[error] Hello: input file not found\nWorld: input file not found\n"})})]}),"\n",(0,l.jsxs)(n.p,{children:["If we modify our script slightly and use the ",(0,l.jsx)(n.code,{children:"shebang"})," sub-command in the header, we will get the following:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:"title=hello.sc",children:"#!/usr/bin/env -S scala-cli shebang -S 3\n\nprintln(args.size)\nprintln(args.headOption)\n"})}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"./hello.sc Hello World\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"2\nSome(Hello)\n"})})]}),"\n",(0,l.jsxs)(n.h3,{id:"shebang-and-the-command-line",children:[(0,l.jsx)(n.code,{children:"shebang"})," and the command line"]}),"\n",(0,l.jsxs)(n.p,{children:["Let's now see how the ",(0,l.jsx)(n.code,{children:"shebang"})," command works straight from the command line."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:"title=Main.scala ",children:'object Main {\n  def main(args: Array[String]): Unit = println(args.mkString(" "))\n}  \n'})}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"scala-cli shebang Main.scala Hello world\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"Hello world\n"})})]}),"\n",(0,l.jsxs)(n.admonition,{type:"note",children:[(0,l.jsxs)(n.p,{children:["Please note that ",(0,l.jsx)(n.code,{children:"shebang"})," changing how arguments are parsed means that every option after the first input will be treated as\nan argument to the app."]}),(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"scala-cli shebang Main.scala -S 2.13 #-S 2.13 is not recognised as an option, but as app arguments\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"-S 2.13\n"})})]})]}),"\n",(0,l.jsxs)(n.p,{children:["If we try to do the same with the ",(0,l.jsx)(n.code,{children:"run"})," sub-command, we get the following error:"]}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:"run-fail",children:"scala-cli run Main.scala Hello world\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"[error]  Hello: input file not found\nworld: input file not found\n"})})]}),"\n",(0,l.jsx)(n.h3,{id:"script-files-extensions",children:"Script files' extensions"}),"\n",(0,l.jsxs)(n.p,{children:["When running the ",(0,l.jsx)(n.code,{children:"shebang"})," subcommand, script files don't need the ",(0,l.jsx)(n.code,{children:".sc"})," extension,\nbut they are then REQUIRED to start with a shebang line:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:"title=hello-with-shebang",children:"#!/usr/bin/env -S scala-cli shebang -S 3\n\nprintln(args.size)\nprintln(args.headOption)\n"})}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"chmod +x hello-with-shebang\n./hello-with-shebang Hello World\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"2\nSome(Hello)\n"})})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-scala",metastring:"title=hello-no-shebang",children:"println(args.size)\nprintln(args.headOption)\n"})}),"\n",(0,l.jsxs)(r.Z,{children:[(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",metastring:"run-fail",children:"chmod +x hello-no-shebang\nscala-cli shebang hello-no-shebang Hello World\n"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"hello-no-shebang: unrecognized source type (expected .scala or .sc extension, or a directory)\n"})})]}),"\n",(0,l.jsx)(n.admonition,{type:"note",children:(0,l.jsxs)(n.p,{children:["Files with no extensions are always run as scripts even though they may contain e.g. valid ",(0,l.jsx)(n.code,{children:".scala"})," program."]})})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},5696:(e,n,s)=>{s.d(n,{Z:()=>r,b:()=>c});s(6540);var a=s(3554),l=s.n(a),i=s(4848);function r(e){let{children:n}=e;return(0,i.jsx)("div",{className:"runnable-command",children:n})}function c(e){let{url:n}=e;return(0,i.jsx)(l(),{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:n})}}}]);